# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

if [ -f !/.bashrc ]; then
	. ~/.bashrc
fi

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

function wave {
gtkwave ~/crunch/plasticine/generated/${1}Test/${1}.vcd
}

function run {
rm -rf ~/crunch/plasticine/generated/${1}Test
~/crunch/plasticine/bin/sadl --sim --vcd ${1}Test
}

function fastapp {
cp -r ${SPATIAL_HOME}/extern/compiler/src/* ${PUB_HOME}/compiler/src/spatial/compiler;cd ${PUB_HOME}/;sbt -DshowSuppressedErrors=true compile
if [[ "$?" -ne "0" ]]; then
  echo "messed up compile"
else
  if [ ${2} != "" ]; then
    bin/spatial --outdir=${PUB_HOME}/${2} ${1} | tee /tmp/fastlog
    exc=$(cat /tmp/fastlog | grep "Exception in thread" | wc -l)
    if [[ "$?" -ne "0" ]]; then
      echo "messed up spatial build"
    elif [[ $exc != 0 ]]; then
      echo "messed up spatial build"
    else
      cd ${PUB_HOME}/${2}
      make clean sim | grep --color=never -A4 "\[maxjcompiler\] [0-9]\+\. ERROR\|^[^\[]\|\[maxjcompiler\] [0-9]\+ problems"
    fi
  else
    bin/spatial ${1} | tee /tmp/fastlog
    exc=$(cat /tmp/fastlog | grep "Exception in thread" | wc -l)
    if [[ "$?" -ne "0" ]]; then 
      echo "messed up spatial build"
    elif [[ $exc != 0 ]]; then
      echo "messed up spatial build"
    else
      remk 
    fi
  fi
fi
}

function freeports {
stale_sims=(`ps axh -O user,etimes | grep mattfel | grep maxcompilersim  | awk '{if ($3 >= 0) print $1}'`)
for job in ${stale_sims[@]}; do
	kill -9 $job
done

}
function freesemaphores {
for semid in `ipcs -s | cut -d" " -f 2` ; do pid=`ipcs -s -i $semid | tail -n 2 | head -n 1 | awk '{print $5}'`; running=`ps --no-headers -p $pid | wc -l` ; if [ $running -eq 0 ] ; then ipcrm -s $semid ; fi ; done
}

function storemaxeler {
rsync -avz -e "ssh -p 3033" mfeldman@portal.maxeler.com:/home/mfeldman/$1 /remote/mattfel/
}

# $1 appname
# $2 optional multifile level
function app3 {
  if [[ $2 = "" ]]; then
    m=4
  else
    m=$2
  fi
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out3
  cmd="bin/spatial $1 --synth --out=out3 --emission=1 --multifile=$m"
  echo "$cmd"
  eval "$cmd"
  cd out3
  make sim
}

# $1 appname
# $2 optional multifile level
function app2 {
  if [[ $2 = "" ]]; then
    m=4
  else
    m=$2
  fi
  cd ${SPATIAL_HOME}
  rm -rf out2
  #make
  # make apps
  cmd="bin/spatial $1 --synth --out=out2 --emission=1 --multifile=$m"
  echo "$cmd"
  eval "$cmd"
  cd out2
  make sim
}

# $1 appname
function vdot {
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf gen/$1
  cmd="bin/spatial $1 --dot --naming --emission=1 --retiming --detail=1"
  echo "$cmd"
  eval "$cmd"
  cd gen/$1/dot
  xdot main.dot
}

function waveon {
#  sed -i '285s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '286s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '288s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '289s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '290s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '291s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
#  sed -i '292s/\/\///g' chisel/template-level/fringeVCS/Top-harness.sv
  sed -i 's/vcdon = .*;/vcdon = 1;/g' chisel/template-level/fringeVCS/Top-harness.sv
}

# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function app {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  waveon
  make sim
}


# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function xapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  waveon
  make xsim
}

# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function wapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  waveon
  make vcs
}

# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function zcapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  waveon
  make zcu
}


# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function vapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  make vcs
}

# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function zapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  make zynq
}

# $1 channel
# $2 appname
# $3 multifile level
# $4 retiming
# $5 other flags like "--affine"
function fapp {
  m=$3
  r=''
  if [[ $4 = "1" ]]; then
    r='--retiming'
  fi 
  cd ${SPATIAL_HOME}
  #make
  # make apps
  rm -rf out${1}
  cmd="bin/spatial $2 --synth --out=out${1} --naming --emission=1 --multifile=$m $r $5"
  echo "$cmd"
  eval "$cmd"
  cd out${1}
  make aws-F1-afi
}



function inferapp {
#echo "Run this fcn in the base output maxj dir to infer which app this is"
#apps=("DotProduct" "MatMult_inner" "TPCHQ6" "BlackScholes" "MatMult_outer"
#	"Kmeans"  "GEMM"      "GDA"    "SGD"   "LogReg" "OuterProduct" 
#        "BFS" "PageRank" "TriangleCounting" "SparseSGD" "TPCHQ1" 
#        "Memcpy2D" "SimpleFold" "Niter" "SimpleReduce" "FifoLoadStore" "ParFifoLoad" "FifoLoad" "SimpleTileLoadStore" "DeviceMemcpy" "FifoPushPop" "ChangingCtrMax" "SequentialWrites" "BubbledWriteTest" "MultiplexedWriteTest" "InOutArg" "ScatterGather" "BlockReduce2D" "UnalignedLd" "BlockReduce1D" "SimpleSequential" "CharBramTest" 
#"CharStoreTest" "CharLoadTest")
#for a in ${apps[@]}; do
#  cnt=(`grep -r "$a" ./maxj | grep -v "makes BFS work\|for BFS" | wc -l`)
#  if [ $cnt -gt 0 ]; then
#    echo "$a has $cnt"
#  fi
#done
cat controller_tree.html | grep "Diagram for" | sed 's/.*Diagram for //g' | sed 's/<\/h2>//g'

}
function hardfloat() {
find . -type f -exec sed -i 's/package hardfloat/package types/g' {} \;
}

function log() {
  bak=`pwd`
  cd /home/mattfel/regression
  files=(*)
  new_packets=()
  sorted_packets=()
  for f in ${files[@]}; do if [[ $f = *"log-"* ]]; then new_packets+=($f); fi; done
  sorted_packets=( $(for arr in "${new_packets[@]}"; do echo $arr; done | sort) )
  cat ${sorted_packets[$((-1-$1))]}
  echo "Printed ${sorted_packets[$((-1-$1))]}"
  cd $bak
}

function reg() {
  if [[ $1 = "" ]]; then
    cd /home/mattfel/regression
  else
    bak=`pwd`
    cd /home/mattfel/regression
    files=(*)
    new_packets=()
    sorted_packets=()
    for f in ${files[@]}; do if [[ $f = *"testdir-"* ]]; then new_packets+=($f); fi; done
    sorted_packets=( $(for arr in "${new_packets[@]}"; do echo $arr; done | sort) )
    cd ${sorted_packets[$((-1-$1))]}/spatial-lang
    echo "Moved to ${sorted_packets[$((-1-$1))]}"
  fi
}

function chiselenv() {
export HYPER_HOME=/home/mattfel/chisel/hyperdsl
export SPATIAL_HOME=${HYPER_HOME}/spatial
export PUB_HOME=${SPATIAL_HOME}/published/Spatial
export FORGE_HOME=${HYPER_HOME}/forge
export DELITE_HOME=${HYPER_HOME}/delite
export LMS_HOME=${HYPER_HOME}/virtualization-lms-core
export PIR_HOME=${HYPER_HOME}/spatial/published/Spatial
}


#alias freeports='sudo pkill -f maxcompilersim;pkill -9 -f "Top[a-z]-london"'
alias git='if [[ -f /home/mattfel/spatial-lang/.git/modules/argon/index.lock ]]; then rm /home/mattfel/spatial-lang/.git/modules/argon/index.lock; fi; if [[ -f /home/mattfel/spatial-lang/.git/index.lock ]]; then rm /home/mattfel/spatial-lang/.git/index.lock; fi; git'
alias dot='xdot /home/mattfel/spatial-lang/out/dot/main.dot &'
alias dot2='xdot /home/mattfel/spatial-lang/out2/dot/main.dot &'
alias dot3='xdot /home/mattfel/spatial-lang/out3/dot/main.dot &'
alias dot4='xdot /home/mattfel/spatial-lang/out4/dot/main.dot &'
alias usage='cat RunRules/DFE/Top_cmd.log | grep %'
alias centos='echo "password for root is aaaaaaaa (a x8)";ssh -X mattfel@192.168.122.59'
alias fastmake='cp -r ${SPATIAL_HOME}/extern/compiler/src/ops/* ${PUB_HOME}/compiler/src/spatial/compiler/ops;cd ${PUB_HOME}/;sbt compile'
alias forge='cd ${HYPER_HOME}/forge'
alias lms='cd ${HYPER_HOME}/virtualization-lms-core/'
alias delite='cd ${HYPER_HOME}/delite'
alias pub='cd ${PUB_HOME}'
alias spatial='cd ${SPATIAL_HOME}'
alias vm='ssh -X mattfel@192.168.122.59'
alias open='xdg-open'
alias mntmaxeler='sudo sshfs mfeldman@portal.maxeler.com:/home/mfeldman /mnt/maxeler -p 3033 -o allow_other,IdentityFile=~/.ssh/id_rsa'
alias cleanpull='git fetch origin master;git reset --hard FETCH_HEAD;git clean -df'
alias info='maxNodeInfo Top_MAX4848A_DFE_SIM/scratch/MaxCompilerDesignData.dat'
alias mk='cd ${SPATIAL_HOME};make'
alias mka='cd ${SPATIAL_HOME};make apps'
alias appwave='gtkwave ${PUB_HOME}/DUT.vcd' #$(ls -Rt ${PUB_HOME}/test_run_dir | awk '"'"'/:$/&&f{s=$0;f=0}/:$/&&!f{sub(/:$/,"");s=$0;f=1;next}NF&&f{ print s"/"$0 }'"'"' | grep "\.vcd" | head -1)'
alias tree='cd ${SPATIAL_HOME}/out;google-chrome ${SPATIAL_HOME}/out/controller_tree.html &'
alias k='pkill -f -9 accel'
alias zinstr='scp mattfel@holodeck-zc706:~/instrumentation.txt ~/spatial-lang'

export ALTERAOCLSDKROOT="/opt/altera/hld"
export LM_LICENSE_FILE=/opt/altera/license/1-ECLIAL_License.dat
export LM_LICENSE_FILE=7193@cadlic0.stanford.edu:1717@cadlic0:$LM_LICENSE_FILE
export PATH=/opt/altera/quartus/bin:$PATH
export PATH=/opt/maxeler/bin:$PATH
export MAXCOMPILERDIR=/opt/maxcompiler/
export PATH=/opt/maxcompiler/bin:$PATH
export MAXELEROSDIR=/opt/maxcompiler/lib/maxeleros-sim
#export MAXCOMPILERDIR=/opt/maxcompiler2016/
#export PATH=/opt/maxcompiler2016/bin:$PATH
#export MAXELEROSDIR=/opt/maxcompiler2016/lib/maxeleros-sim
#export HYPER_HOME=/home/mattfel/hyperdsl
#export SPATIAL_HOME=${HYPER_HOME}/spatial
#export PUB_HOME=${SPATIAL_HOME}/published/Spatial
#export FORGE_HOME=${HYPER_HOME}/forge
#export DELITE_HOME=${HYPER_HOME}/delite
#export LMS_HOME=${HYPER_HOME}/virtualization-lms-core
#export PIR_HOME=${HYPER_HOME}/spatial/published/Spatial
export SPATIAL_HOME='/home/mattfel/spatial-lang'
export PUB_HOME='/home/mattfel/macro/spatial/out'
export ARGON_HOME='${SPATIAL_HOME}/argon'
export VIRTUALIZED_HOME='${SPATIAL_HOME}/scala-virtualized'
export JAVA_HOME=$(readlink -f $(dirname $(readlink -f $(which java)))/../../)
export VCS_HOME=/cad/synopsys/vcs/K-2015.09-SP2-7
export PATH=/usr/bin:$VCS_HOME/amd64/bin:$PATH
export LM_LICENSE_FILE=27000@cadlic0.stanford.edu:$LM_LICENSE_FILE
export TEMPLATES_HOME=${SPATIAL_HOME}/spatial/core/resources/chiselgen/template-level
export USE_IDEAL_DRAM=0
export SBT_OPTS="-Xmx64G -Xss1G"
export _JAVA_OPTIONS="-Xmx32g -Xss8912k -Xms16g"
export PATH=/opt/altera/modelsim_ase/bin:$PATH
export LM_LICENSE_FILE=7193@cadlic0.stanford.edu:$LM_LICENSE_FILE
export LM_LICENSE_FILE=/opt/Xilinx/awsF1.lic:7193@cadlic0.stanford.edu:$LM_LICENSE_FILE
export AWS_HOME=/home/mattfel/aws-fpga
export AWS_CONFIG_FILE=/home/mattfel/aws-fpga/hdk/cl/examples/rootkey.csv
export RPT_HOME=/home/mattfel/aws-fpga/hdk/cl/examples
export EMAIL=mattfel@stanford.edu
source /opt/Xilinx/SDx/2017.1/settings64.sh
#export PATH=/opt/Xilinx/Vivado_HLS/2017.1/bin/:$PATH
#export PATH=$PATH:/opt/Xilinx/Vivado/2017.1/bin
export XILINX_VIVADO=/opt/Xilinx/Vivado/2017.1
export PATH=/usr/bin:/local/ssd/home/mattfel/aws-fpga/hdk/common/scripts:$PATH
#cd /home/mattfel/aws-fpga/
#source /home/mattfel/aws-fpga/hdk_setup.sh
export LD_LIBRARY_PATH=${XILINX_VIVADO}/lib/lnx64.o:${LD_LIBRARY_PATH}
#alias reg='cd /home/mattfel/regression'
alias map='ll /remote/regression/mapping'
alias sp='cd ~/spatial-lang'
alias s='git status'
alias c='git commit'
alias ca='git checkout asplos2018'
alias cr='git checkout regression'
alias cf='git checkout fpga'
alias p='git push'
alias rr='bash utilities/run_regression.sh'
alias ez='bash utilities/ezgit.sh'
alias a='git add'
alias szc='scp $(basename $(pwd)).tar.gz mattfel@holodeck-zc706:'
alias szcu='scp $(basename $(pwd)).tar.gz root@zcu102:'
export CLOCK_FREQ_MHZ=125

function copy_aws_data() {
  scp -i ~/spatial_key.pem /remote/regression/data/machsuite/${1}* centos@54.84.94.1:/remote/regression/data/machsuite
}

function step5() {
 n=$(basename $(pwd))
 cat create* | grep agfi-
 sleep 5
 vim software/runtime/load.sh
 scp -i ~/spatial_key.pem software/runtime/load.sh centos@54.84.94.1:~/src/project_data/aws-fpga/hdk/cl/examples/load.sh
 scp -i ~/spatial_key.pem software/runtime/Top centos@54.84.94.1:~/src/project_data/aws-fpga/hdk/cl/examples/Top
}
function step1() {
 sed -i "s/^.*ASSERT/\/\/ASSERT/g" cpp/TopHost.cpp
 n=$(basename $(pwd))
 make aws-F1-sw
 cp create_* ${RPT_HOME}/$n
}

alias step2='cd software/include;cp ~/spatial-lang/fringecontextaws.h ./FringeContextAWS.h; cp ~/spatial-lang/fringecontextbase.h ./FringeContextBase.h;cd ../runtime;make clean;make;cd ../../;cat create_*;sed -n 1,7p create_spatial_AFI_instructions.txt | xclip -selection c'

function step3() {
  sed -i "s/out_aws_.*2017.*_bucket/$1/g" ~/spaghettipolicy
  sed -i "s/17_.*_CL\.tar/$2/g" ~/spaghettipolicy
}
function step4() {
 n=$(basename $(pwd))
 nn=`echo $n | sed "s/aws/done/g"`
 cd ../
 mv $n $nn
}

alias ctr='cd /opt/Xilinx/Vivado/2017.1/examples/xsim/verilog/xsi/counter'
export FOREGROUND="-foreground" # for aws-f1-afi running in foreground
alias f1='cd /home/mattfel/regression/synth/aws/spatial/spatial-lang'
alias zy='cd /home/mattfel/regression/synth/zynq/spatial/spatial-lang'
export PIR_HOME=/home/mattfel/regression/synth
export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu #for xilinx hls stuff
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

function redo_sw() {
  cd cpp
  make clean
  cd ../
  make $1-sw
}

function send_results() {
  for D in */; do
    cd $D
    bash scrape.sh $1
    cd ../
  done
}

export SDK_DIR=~/aws-fpga/sdk

# $1 = dir
# $2 = agfi
function popagfi() {
  if [[ ${aws_ip} = "" ]]; then
    echo "PLEASE EXPORT AWS F1 IP as variable 'aws_ip'"
    exit 1
  fi
  dir=Nov16
  sed -i "s/agfi-\[PLACE ID HERE\]/$2/g" software/runtime/load.sh
  ssh -i ~/spatial_key.pem centos@${aws_ip} "mkdir /home/centos/src/project_data/aws-fpga/$dir/$1"
  scp -i ~/spatial_key.pem software/runtime/Top centos@${aws_ip}:/home/centos/src/project_data/aws-fpga/$dir/$1
  scp -i ~/spatial_key.pem software/runtime/load.sh centos@${aws_ip}:/home/centos/src/project_data/aws-fpga/$dir/$1
}


export aws_ip=54.196.63.244
export GUROBI_HOME=/opt/gurobi752/linux64
export PATH=$PATH:$GUROBI_HOME/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${GUROBI_HOME}/lib
function sosymbol() {
for lib in $(find . -name \*.so) ; do echo $lib ; nm -D $lib | grep $1 | grep -v " U "   ; done
}
function asymbol() {
for lib in $(find . -name \*.a) ; do echo $lib ; nm $lib | grep $1 | grep -v " U "   ; done
}
function insideos {
sed -i "s/#define FRINGE_MEM_BASEADDR.*/#define FRINGE_MEM_BASEADDR    0x20000000/g" cpp/fringeZCU/ZCUAddressMap.h
}
function outsideos {
sed -i "s/#define FRINGE_MEM_BASEADDR.*/#define FRINGE_MEM_BASEADDR    0x4444000000/g" cpp/fringeZCU/ZCUAddressMap.h
}

function noflush {
sed -i "s/.*c1->flushCache/\/\/c1->flushCache/g" cpp/TopHost.cpp
}
function yesflush {
sed -i "s/.*c1->flushCache/c1->flushCache/g" cpp/TopHost.cpp
}

